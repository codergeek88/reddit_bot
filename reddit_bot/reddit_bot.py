#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan  4 21:43:04 2021

@author: kishanpatel
"""

#!/usr/bin/python
import praw
import features
import time

def login():
    reddit = praw.Reddit(client_id=features.client_id,
                         client_secret=features.client_secret,
                         username = features.username,
                         password = features.password,
                         user_agent=features.user_agent)
    return reddit

def findSub(reddit, sub): #reddit is an instance of the bot generated by login()
    return reddit.subreddit(sub)

def printPosts(subreddit, num_posts):
    for submission in subreddit.hot(limit=num_posts):
        print("Title: ", submission.title)
        print("Text: ", submission.selftext)
        print("Score: ", submission.score)
        print("---------------------------------\n")

def isCommentIDValid(comment_ids_file, comment):
    '''

    Parameters
    ----------
    comment_ids_file : .txt file
        contains all recorded comment IDs.
    comment : str
        the comment under examination.

    Returns
    -------
    True if the comment ID has not already been recorded and False otherwise.

    '''
    valid_id = True
    f_read = open(comment_ids_file, "r")
    for line in f_read:
        if line.startswith(comment.id):
            valid_id = False
            return valid_id
    return valid_id
    f_read.close()

def lowerKeywordList(keyword_list): #retruns lowercase version of keyword_list
    lower_keyword_list = []
    for keyword in keyword_list:
        lower_keyword_list.append(keyword.lower())
    return lower_keyword_list

def generateKeywordDict(keyword_list):
    keyword_dict = {}
    for keyword in keyword_list:
        keyword_dict[keyword] = 0
    return keyword_dict

def updateKeywordDict(keyword_dict, keyword):
    keyword_dict[keyword] += 1

def recordOneComment(comment, comment_ids_file, comments_file):
    with open(comment_ids_file, "a") as f_ids:
        f_ids.write(comment.id + "\n")
    with open(comments_file, "a") as f_comments:
        f_comments.write(comment.body + "\n" + "------------------\n")

def recordComments(subreddit, keyword_list, keyword_dict, comment_ids_file, comments_file, 
                   num_comments):
    '''
    
    Parameters
    ----------
    subreddit : TYPE
        DESCRIPTION.
    keyword_list : TYPE
        DESCRIPTION.
    comment_ids_file : TYPE
        DESCRIPTION.
    num_comments : TYPE
        DESCRIPTION.

    Returns
    -------
    records the comment_ids of all comments containing a keykeyword in comment_ids_file

    '''
    for comment in subreddit.comments(limit=num_comments):
        if isCommentIDValid(comment_ids_file, comment):
            comment_lower = comment.body.lower()
            comment_recorded = False
            for keyword in keyword_list:
                if keyword in comment_lower:
                    if comment_recorded == False:
                        recordOneComment(comment, comment_ids_file, comments_file)
                        comment_recorded = True
                    updateKeywordDict(keyword_dict, keyword)

def readComments(comments_file):
    f = open(comments_file, "r")
    comments = f.read()
    print(comments)
    f.close()

def findComments(subreddit, keyword_list, keyword_dict, comment_ids_file, comments_file, 
                 num_comments):
    recordComments(subreddit, keyword_list, keyword_dict, comment_ids_file, comments_file, 
                   num_comments)
    readComments(comments_file)

def clearFile(file):
    f = open(file, "a")
    f.truncate(0)
    f.close()

def clearAllFiles(comment_ids_file, comments_file, keyword_dict_file):
    clearFile(comment_ids_file)
    clearFile(comments_file)
    clearFile(keyword_dict_file)

def run_bot(sub, keyword_list, comment_ids_file, comments_file, keyword_dict_file,
            num_posts, num_comments, num_iters, delay_time):
    reddit = login()
    subreddit = findSub(reddit, sub)
    keyword_list = lowerKeywordList(keyword_list) #transforms keyword_list into lowercase
    keyword_dict = generateKeywordDict(keyword_list) #generates dictionary of lowercase keywords
    #printPosts(subreddit, num_posts)
    clearAllFiles(comment_ids_file, comments_file, keyword_dict_file)
    for iteration in range(num_iters):
        findComments(subreddit, keyword_list, keyword_dict, comment_ids_file, comments_file, 
                     num_comments)
        time.sleep(delay_time)
    keyword_dict = recordKeywordDict(keyword_dict, keyword_dict_file, num_comments, num_iters)
    return keyword_dict

def calculateKeywordRate(num_keyword_apperances, total_num_comments):
    return num_keyword_apperances/total_num_comments

def recordKeywordDict(keyword_dict, keyword_dict_file, num_comments, num_iters):
    total_num_comments = num_comments * num_iters
    keyword_dict = dict(sorted(keyword_dict.items(), key=lambda item: item[1], reverse=True))
    f = open(keyword_dict_file, "a")
    for keyword in keyword_dict:
        num_keyword_apperances = keyword_dict[keyword]
        keyword_rate = calculateKeywordRate(num_keyword_apperances, total_num_comments)
        keyword_rate_percentage = keyword_rate * 100
        f.write(keyword + ": " + str(num_keyword_apperances) + " (rate = " + 
                str(keyword_rate_percentage) + "%)" + "\n")
    f.close()
    return keyword_dict
    
#external text files to record comment IDs and comment texts
comment_ids_file = "comment_ids.txt"
comments_file = "comments.txt"
keyword_dict_file = "keyword_dict.txt"

#variables to modify
sub = "wallstreetbets"
keyword_list = ['gme', 'amc', 'pltr', 'cramer']
num_posts = 50
num_comments = 500
num_iters = 1
delay_time = 0 #in seconds

if __name__=="__main__":
    keyword_dict = run_bot(sub, keyword_list, comment_ids_file, comments_file, keyword_dict_file,
            num_posts, num_comments, num_iters, delay_time)
    print("results:", keyword_dict)
    print("---------------------------------")
    print()




















